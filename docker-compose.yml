services:
  # Redis for event store and caching
  redis:
    image: redis:7-alpine
    container_name: rate-limiter-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rate-limiter-network

  # PostgreSQL for rule repository and read models
  postgres:
    image: postgres:15-alpine
    container_name: rate-limiter-postgres
    environment:
      POSTGRES_DB: rate_limiter
      POSTGRES_USER: ratelimiter
      POSTGRES_PASSWORD: ratelimiter123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ratelimiter -d rate_limiter"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rate-limiter-network

  # Basic Rate Limiter Service
  rate-limiter-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.rate-limiter
    container_name: rate-limiter-service
    ports:
      - "8080:8080"
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgres://ratelimiter:ratelimiter123@postgres:5432/rate_limiter?sslmode=disable
      - LOG_LEVEL=info
      - PORT=8080
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - rate-limiter-network

  # Integrated Service (Rate Limiter + Rule Engine)
  integrated-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.integrated
    container_name: integrated-service
    ports:
      - "8081:8080"
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgres://ratelimiter:ratelimiter123@postgres:5432/rate_limiter?sslmode=disable
      - LOG_LEVEL=info
      - PORT=8080
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - rate-limiter-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: rate-limiter-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - rate-limiter-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rate-limiter-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - rate-limiter-network

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: rate-limiter-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - rate-limiter-network

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: rate-limiter-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - rate-limiter-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: rate-limiter-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - rate-limiter-network

  # Load balancer (nginx)
  nginx:
    image: nginx:alpine
    container_name: rate-limiter-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - rate-limiter-service
      - integrated-service
    restart: unless-stopped
    networks:
      - rate-limiter-network



  # Test client for load testing
  test-client:
    build:
      context: .
      dockerfile: docker/Dockerfile.test-client
    container_name: rate-limiter-test-client
    environment:
      - TARGET_URL=http://integrated-service:8080
      - TEST_DURATION=60s
      - CONCURRENT_USERS=10
    depends_on:
      - integrated-service
    profiles:
      - testing
    networks:
      - rate-limiter-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  rate-limiter-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1
